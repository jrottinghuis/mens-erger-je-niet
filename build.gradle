/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
 // See also https://docs.gradle.org/current/userguide/getting_started.html
 plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java'
    id 'jvm-test-suite' // Adds task test
    id 'eclipse' // Adds tasks eclipse , cleanEclipse, cleanEclipseProject, cleanEclipseClasspath, , eclipseProject, eclipseClasspath, eclipseJdt
    id 'idea' // Adds tasks idea, openIdea, and cleanIdea tasks
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'application' // Adds task run
}

group = 'com.rttnghs'
version = '0.0.3-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_22
}

javafx {
    version = '22'
    modules = [ 'javafx.base', 'javafx.controls', 'javafx.graphics' ]
    // Build for current platform, or linux, linux-aarch64, mac, {win or windows}, {osx,mac, or macos}, {osx-aarch64, mac-aarch64, or macos-aarch64}
    //platform = 'win'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.junit.platform:junit-platform-suite:1.9.1'

    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.0'
    // Process sources using `log4j-core` providing `org.apache.logging.log4j.core.config.plugins.processor.PluginProcessor` that generates `Log4j2Plugins.dat` -->
    annotationProcessor('org.apache.logging.log4j:log4j-core:2.24.0')

    // Used for configuration loading
    implementation 'org.apache.commons:commons-configuration2:2.11.0'
    // Added only for bump up dependency for commons-configuration to non-vulnerable version
    implementation 'org.apache.commons:commons-text:1.12.0'
    // Used by configuration builders
    implementation 'commons-beanutils:commons-beanutils:1.9.4'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    // api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:33.3.0-jre'
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }
        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project()
            }

            targets {
                configureEach {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

application {
    mainClass = 'com.javafx.mejn.Main'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.javafx.mejn.Main'
        )
    }
}

tasks.register('runGame', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'com.rttnghs.mejn.Game'

    // arguments to pass to the application
    args 'appArg1'
}

tasks.register('runTournament', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'com.rttnghs.mejn.Tournament'

    // arguments to pass to the application
    args 'appArg1'

}

tasks.register('runConfig', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'com.rttnghs.mejn.configuration.Config'

    // arguments to pass to the application
    args 'appArg1'

}


