# Log4j2.properties format
status = warn
#dest = err
name = PropertiesConfig

property.basePath = target/
property.filename = ${basePath}/rolling-logs/log4j-mejn.log
 
appender.console.type = Console
appender.console.name = consoleLogger
appender.console.target = SYSTEM_OUT
appender.console.layout.type = PatternLayout
# Simple message format
appender.console.layout.pattern = %m%n
# More elaborate message format
#appender.console.layout.pattern = [%d] %p %m (%c)%n
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = info

 
appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName = ${filename}
appender.rolling.filePattern = ${basePath}/rolling-logs-archive/log4j-mejn-%d{yyyy-MM-dd-HH}-%i.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d %p %C{1.} [%t] %m%n
# Keeping a max number of logs around
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.action.type = Delete
appender.rolling.strategy.action.basepath = ${basePath}/rolling-logs-archive/
appender.rolling.strategy.action.condition.type = IfLastModified
appender.rolling.strategy.action.condition.age = 7D
appender.rolling.strategy.action.maxdepth = 1
appender.rolling.strategy.action.PathConditions.type = IfFileName
appender.rolling.strategy.action.PathConditions.glob = log4j-mejn-*.log.gz

appender.rolling.policies.type = Policies
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=100MB
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.max = 10

# Class specific tracing:
logger.mine.name = com.rttnghs.mejn.Tournament
logger.mine.level = info
logger.mine.additivity = false
logger.mine.appenderRef.rolling.ref = fileLogger
logger.mine.appenderRef.console.ref = consoleLogger

# Deal with annoying info message. See https://issues.apache.org/jira/browse/BEANUTILS-477
logger.beanutils.name = org.apache.commons.beanutils.FluentPropertyBeanIntrospector
logger.beanutils.level = error
logger.beanutils.additivity = true
 
rootLogger.level = info
#rootLogger.level = error
rootLogger.additivity = false
rootLogger.appenderRef.rolling.ref = fileLogger
rootLogger.appenderRef.console.ref = consoleLogger

# Possible levels per component
#OFF	No events will be logged.
#FATAL	A fatal event that will prevent the application from continuing.
#ERROR	An error in the application, possibly recoverable.
#WARN	An event that might possible lead to an error.
#INFO	An event for informational purposes.
#DEBUG	A general debugging event.
#TRACE	A fine-grained debug message, typically capturing the flow through the application.
#ALL	All events should be logged.
#
# For patterns:
#%d is used to add the timestamp
#[%t] will add the thread name to the log statement.
#%-5p will add the log level information to the log statement.
#%c will add the fully qualified class name which is logging the log statement.
#%msg is for the log message and %n is for adding a new line after every log statement.